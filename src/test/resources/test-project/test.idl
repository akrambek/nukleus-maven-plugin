/*
 * Copyright 2016-2017 The Reaktivity Project
 *
 * The Reaktivity Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
scope test
{

    scope inner {
        //option byte_order native;
        
        struct FlatParent
        {
            uint64 fixed1;
        }
    
        struct Flat extends test::inner::FlatParent [0x10000001]
        {
            uint16 fixed2 = 222;
            string string1;
            int32 fixed3 = 333;
            string string2;
        }
    
        struct Nested
        {
            uint64 fixed4 = 444;
            test::inner::Flat flat;
            int64 fixed5;
        }
    
        struct FlatWithList
        {
            uint64 fixed1 = 111;
            string string1;
            list<string> list1;
            int32 fixed2 = 5;
        }
    
        struct FlatWithOctets
        {
            uint32 fixed1 = 11;
            octets[10] octets1;
            uint16 lengthOctets2;
            string string1;
            octets[lengthOctets2] octets2;
            varint32 lengthOctets3;
            octets[lengthOctets3] octets3 = null;
            int32 lengthOctets4;
            octets[lengthOctets4] octets4 = null;
            octets extension;
        }
        
        struct OctetsDefaultedNoAnchor
        {
            int32 length;
            octets[length] payload = null;
            octets extension;
        }
        
        union UnionOctets switch (uint8)
        {
            case 1: octets[4] octets4;
            case 2: octets[16] octets16;
            case 3: string string1;
        }
    
        struct Integers
        {
            uint8  unsigned8  = 0xFF;
            uint16 unsigned16 = 0xFFFF;
            uint32 unsigned32 = 0x7FFFFFFF; // TODO: 0xFFFFFFFF;
            uint64 unsigned64 = 0x7FFFFFFF; // TODO: 0xFFFFFFFFFFFFFFFF;
            varint32 variable32 = 123;
            int8  signed8  =  -8;
            int16 signed16 = -16;
            int32 signed32 = -32;
            int64 signed64 = -64;
            varint64 variable64 = -234;
        }
    
        struct IntegerFixedArrays
        {
            uint8[1]  uint8Array;
            uint16[2] uint16Array;
            uint32[3] uint32Array;
            uint64[4] uint64Array;
            string anchor;
            int8[1]  int8Array;
            int16[2] int16Array;
            int32[3] int32Array;
            int64[4] int64Array;
        }
    
        struct IntegerVariableArrays
        {
            uint8  fixed1 = 0;
            int32 lengthUnsigned64;
            int16 fixed2 = 0;
            varint32[] varint32Array;
            uint64[lengthUnsigned64] unsigned64Array = null;
            uint8 lengthSigned16;
            int16[lengthSigned16] signed16Array;
            varint64[] varint64Array;
            int8 lengthInt8;
            int32[lengthInt8] arrayWithInt8Size = null;
            int16 lengthInt16;
            int32[lengthInt16] arrayWithInt16Size = null;
        }
    
        struct NestedAllDefaulting
        {
            uint8 fixed1 = 11;
            test::inner::Integers integers;
        }

        enum Roll
        {
            EGG,
            SPRING,
            FORWARD
        }

        enum Number (uint8)
        {
            ONE (1),
            TWO (2),
            THREE (3)
        }
        
        struct PotentialNameConflicts
        {
           string value;
           int32 newLimit;
           string buffer;
           octets[10] offset; 
           string limit;
        }
        
        struct ContiguousSizeFields
        {
        	    int8 length1;
        	    int8 length2;
        	    int8[length1] array1 = null;
        	    int8[length2] array2 = null;
        	    string string1;
        	    int8 length3;
        	    int8 length4;
        	    int8[length3] array3 = null;
        	    int8[length4] array4 = null;
        }

    }
}
